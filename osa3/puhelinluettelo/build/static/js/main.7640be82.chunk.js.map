{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","Notification","message","className","Person","person","handleClick","name","number","onClick","People","persons","filter_string","showThesePeople","filter","includes","map","key","Filter","changeFunction","onChange","value","PersonForm","newNumber","newName","addPerson","handleNameChange","handleNumberChange","onSubmit","type","App","useState","setPersons","setNewName","setNewNumber","newFilter","setNewFilter","errorMessage","setErrorMessage","useEffect","console","log","dbService","initialPersons","setTimeout","catch","error","event","target","preventDefault","dataObject","addedPerson","concat","removedPersonId","removedPersonName","window","confirm","result","filteredPersons","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7640be82.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)  \n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst deleteData = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default {\n    getAll, \n    create,\n    update,\n    deleteData\n}","import React, {useState, useEffect} from 'react'\nimport dbService from './services/persons'\nimport './error.css'\n\nconst Notification = ({ message }) => {\n\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst Person = ({person, handleClick}) => {\n  return (\n    <h4>{person.name} {person.number} <button name={person.name} id={person.id} onClick={handleClick}>Remove</button></h4>\n  )\n}\n\nconst People = ({persons, filter_string, handleClick}) => {\n  \n  const showThesePeople = persons.filter( (person) => person.name.includes(filter_string))\n  return (\n      <div>\n        {showThesePeople.map( person => <Person handleClick={handleClick} key={person.name} person={person} /> )}\n      </div>\n    ) \n   \n}\n\nconst Filter = ({changeFunction, filter}) => {\n  return(\n    <>\n      filter shown with: <input onChange={changeFunction} value={filter} />\n    </>\n  )\n}\n\nconst PersonForm = ({newNumber, newName, addPerson, \n  handleNameChange, handleNumberChange}) => {\n    return (\n      <form onSubmit={addPerson}>\n        <h2>Add a new</h2>\n        <div>\n          name: <input onChange={handleNameChange} value={newName} />\n        </div>\n        <div>\n          number: <input onChange={handleNumberChange} value={newNumber} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n  }\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [ errorMessage, setErrorMessage ] = useState('')\n\n  useEffect(() => {\n    console.log('effect')\n    dbService\n      .getAll()\n      .then(initialPersons => {\n        console.log('initialPersons:', initialPersons )\n        setPersons(initialPersons)\n\n        setErrorMessage('People loaded from server successfully')\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n      .catch(error => {\n        setErrorMessage('Unable load initial phonenumbers from the server')\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    const dataObject = {\n      name: newName,\n      number: newNumber,\n    }\n\n    dbService\n      .create(dataObject)\n      .then( addedPerson => {  \n        setPersons(persons.concat(addedPerson))\n        setNewName('')\n        setNewNumber('')\n        setErrorMessage(`${dataObject.name} added.`)\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 5000)\n      })\n      .catch(error => {\n        setErrorMessage(error.response.data.error)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n\n  }\n\n\n  const handleNameChange = (event) => {\n    console.log(newName)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(newNumber)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log(newFilter)\n    setNewFilter(event.target.value)\n  }\n\n  const handleRemoveClick = (event) => {\n    const removedPersonId = event.target.id\n    const removedPersonName = event.target.name\n    console.log('In handleRemoveClick')\n    console.log(removedPersonId)\n    const result = window.confirm(`Do you really want to remove ${removedPersonName}?`)\n    if(result === true) {\n      dbService\n      .deleteData(removedPersonId)\n      .then(result => {\n        setErrorMessage(`${removedPersonName} removed.`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        \n      })\n      .catch(error => {\n        setErrorMessage(`Removing the person called: ${removedPersonName} FAILED!`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n      const filteredPersons = persons.filter( person => {\n        if(person.id !== removedPersonId) {\n          console.log(`person.id: ${person.id} removedPersonId: ${removedPersonId}`)\n          return true\n        }\n        else {\n          console.log(`person.id: ${person.id} removedPersonId: ${removedPersonId}`)\n          return false\n        }\n\n      })\n      setPersons(filteredPersons)\n      console.log(persons)\n    }\n    \n  }\n  \n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} />\n      <Filter changeFunction={handleFilterChange} filter={newFilter}/>\n      <PersonForm newName={newName} newNumber={newNumber} handleNumberChange={handleNumberChange}\n      handleNameChange={handleNameChange} addPerson={addPerson} />\n      <h2>Numbers</h2>\n      <People handleClick={handleRemoveClick} persons={persons} filter_string={newFilter}/>\n    </div>\n  )\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}